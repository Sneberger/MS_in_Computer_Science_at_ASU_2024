diff -ruN gem5/src/cpu/pred/BranchPredictorOld.py /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/BranchPredictorOld.py
--- gem5/src/cpu/pred/BranchPredictorOld.py	1969-12-31 17:00:00.000000000 -0700
+++ /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/BranchPredictorOld.py	2019-05-28 11:25:44.538823082 -0700
@@ -0,0 +1,161 @@
+# Copyright (c) 2012 Mark D. Hill and David A. Wood
+# Copyright (c) 2015 The University of Wisconsin
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: Nilay Vaish and Dibakar Gope
+
+from m5.SimObject import SimObject
+from m5.params import *
+from m5.proxy import *
+
+class BranchPredictor(SimObject):
+    type = 'BranchPredictor'
+    cxx_class = 'BPredUnit'
+    cxx_header = "cpu/pred/bpred_unit.hh"
+    abstract = True
+
+    numThreads = Param.Unsigned(Parent.numThreads, "Number of threads")
+    BTBEntries = Param.Unsigned(4096, "Number of BTB entries")
+    BTBTagSize = Param.Unsigned(16, "Size of the BTB tags, in bits")
+    RASSize = Param.Unsigned(16, "RAS size")
+    instShiftAmt = Param.Unsigned(2, "Number of bits to shift instructions by")
+
+    useIndirect = Param.Bool(True, "Use indirect branch predictor")
+    indirectHashGHR = Param.Bool(True, "Hash branch predictor GHR")
+    indirectHashTargets = Param.Bool(True, "Hash path history targets")
+    indirectSets = Param.Unsigned(256, "Cache sets for indirect predictor")
+    indirectWays = Param.Unsigned(2, "Ways for indirect predictor")
+    indirectTagSize = Param.Unsigned(16, "Indirect target cache tag bits")
+    indirectPathLength = Param.Unsigned(3,
+        "Previous indirect targets to use for path history")
+
+
+
+class LocalBP(BranchPredictor):
+    type = 'LocalBP'
+    cxx_class = 'LocalBP'
+    cxx_header = "cpu/pred/2bit_local.hh"
+
+    localPredictorSize = Param.Unsigned(4096, "Size of local predictor")
+    localCtrBits = Param.Unsigned(2, "Bits per counter")
+
+
+class TournamentBP(BranchPredictor):
+    type = 'TournamentBP'
+    cxx_class = 'TournamentBP'
+    cxx_header = "cpu/pred/tournament.hh"
+
+    localPredictorSize = Param.Unsigned(2048, "Size of local predictor")
+    localCtrBits = Param.Unsigned(2, "Bits per counter")
+    localHistoryTableSize = Param.Unsigned(2048, "size of local history table")
+    globalPredictorSize = Param.Unsigned(8192, "Size of global predictor")
+    globalCtrBits = Param.Unsigned(2, "Bits per counter")
+    choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")
+    choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")
+
+
+class BiModeBP(BranchPredictor):
+    type = 'BiModeBP'
+    cxx_class = 'BiModeBP'
+    cxx_header = "cpu/pred/bi_mode.hh"
+
+    globalPredictorSize = Param.Unsigned(8192, "Size of global predictor")
+    globalCtrBits = Param.Unsigned(2, "Bits per counter")
+    choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")
+    choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")
+
+# TAGE branch predictor as described in https://www.jilp.org/vol8/v8paper1.pdf
+# The default sizes below are for the 8C-TAGE configuration (63.5 Kbits)
+class TAGE(BranchPredictor):
+    type = 'TAGE'
+    cxx_class = 'TAGE'
+    cxx_header = "cpu/pred/tage.hh"
+
+    nHistoryTables = Param.Unsigned(7, "Number of history tables")
+    minHist = Param.Unsigned(5, "Minimum history size of TAGE")
+    maxHist = Param.Unsigned(130, "Maximum history size of TAGE")
+
+    tagTableTagWidths = VectorParam.Unsigned(
+        [0, 9, 9, 10, 10, 11, 11, 12], "Tag size in TAGE tag tables")
+    logTagTableSizes = VectorParam.Int(
+        [13, 9, 9, 9, 9, 9, 9, 9], "Log2 of TAGE table sizes")
+    logRatioBiModalHystEntries = Param.Unsigned(2,
+        "Log num of prediction entries for a shared hysteresis bit " \
+        "for the Bimodal")
+
+    tagTableCounterBits = Param.Unsigned(3, "Number of tag table counter bits")
+    tagTableUBits = Param.Unsigned(2, "Number of tag table u bits")
+
+    histBufferSize = Param.Unsigned(2097152,
+            "A large number to track all branch histories(2MEntries default)")
+
+    pathHistBits = Param.Unsigned(16, "Path history size")
+    logUResetPeriod = Param.Unsigned(18,
+        "Log period in number of branches to reset TAGE useful counters")
+    useAltOnNaBits = Param.Unsigned(4, "Size of the USE_ALT_ON_NA counter")
+
+
+# LTAGE branch predictor as described in
+# https://www.irisa.fr/caps/people/seznec/L-TAGE.pdf
+# It is basically a TAGE predictor plus a loop predictor
+# The differnt TAGE sizes are updated according to the paper values (256 Kbits)
+class LTAGE(TAGE):
+    type = 'LTAGE'
+    cxx_class = 'LTAGE'
+    cxx_header = "cpu/pred/ltage.hh"
+
+    nHistoryTables = 12
+    minHist = 4
+    maxHist = 640
+    tagTableTagWidths = [0, 7, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15]
+    logTagTableSizes = [14, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 9, 9]
+    logUResetPeriod = 19
+
+    logSizeLoopPred = Param.Unsigned(8, "Log size of the loop predictor")
+    withLoopBits = Param.Unsigned(7, "Size of the WITHLOOP counter")
+    loopTableAgeBits = Param.Unsigned(8, "Number of age bits per loop entry")
+    loopTableConfidenceBits = Param.Unsigned(2,
+            "Number of confidence bits per loop entry")
+    loopTableTagBits = Param.Unsigned(14, "Number of tag bits per loop entry")
+    loopTableIterBits = Param.Unsigned(14, "Nuber of iteration bits per loop")
+    logLoopTableAssoc = Param.Unsigned(2, "Log loop predictor associativity")
+
+    # Parameters for enabling modifications to the loop predictor
+    # They have been copied from ISL-TAGE
+    # (https://www.jilp.org/jwac-2/program/03_seznec.tgz)
+    #
+    # All of them should be disabled to match the original LTAGE implementation
+    # (http://hpca23.cse.tamu.edu/taco/camino/cbp2/cbp-src/realistic-seznec.h)
+
+    # Add speculation
+    useSpeculation = Param.Bool(False, "Use speculation")
+
+    # Add hashing for calculating the loop table index
+    useHashing = Param.Bool(False, "Use hashing")
+
+    # Add a direction bit to the loop table entries
+    useDirectionBit = Param.Bool(False, "Use direction info")
+
diff -ruN gem5/src/cpu/pred/BranchPredictor.py /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/BranchPredictor.py
--- gem5/src/cpu/pred/BranchPredictor.py	2019-05-20 10:45:07.000000000 -0700
+++ /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/BranchPredictor.py	2019-06-10 10:57:47.109004000 -0700
@@ -159,3 +159,23 @@
     # Add a direction bit to the loop table entries
     useDirectionBit = Param.Bool(False, "Use direction info")
 
+# Below classes added per Project 2 Assignment Instructions
+
+class GshareBP(BranchPredictor):
+    type = 'GshareBP'
+    cxx_class = 'GshareBP'
+    cxx_header = "cpu/pred/gshare.hh"
+    PHTCtrBits = Param.Unsigned('2', "Size of counter bits")
+    PHTPredictorSize = Param.Unsigned('16384', "Size of local Predictor")
+    globalPredictorSize = Param.Unsigned('16', "Size of global Predictor")
+#    reset = Param.unsigned() # new for error
+
+class Gshare8KBP(GshareBP):
+    PHTPredictorSize = Param.Unsigned(4096, "Size of local predictor")
+    PHTCtrBits = Param.Unsigned(2, "Bits per counter")
+    globalPredictorSize = Param.Unsigned(12, "Size of global history bits")
+
+class Gshare32KBP(GshareBP):
+    PHTPredictorSize = Param.Unsigned(16384, "Size of local predictor")
+    PHTCtrBits = Param.Unsigned(2, "Bits per counter")
+    globalPredictorSize = Param.Unsigned(14, "Size of global history bits")
diff -ruN gem5/src/cpu/pred/gshare.cc /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/gshare.cc
--- gem5/src/cpu/pred/gshare.cc	1969-12-31 17:00:00.000000000 -0700
+++ /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/gshare.cc	2019-06-11 11:19:18.085770000 -0700
@@ -0,0 +1,189 @@
+/*
+ * Copyright (c) 2019 Michael Sneberger
+ * All rights reserved
+ *
+ * Authors: Michael Sneberger
+ */
+
+#include "cpu/pred/gshare.hh"
+#include "base/bitfield.hh"
+#include "base/intmath.hh"
+
+GshareBP::GshareBP(const GshareBPParams *params)
+    : BPredUnit(params),
+	  globalHistoryReg(params->numThreads, 0),
+      globalPredictorSize(0), //initilize the global History registor to 0
+      globalHistoryBits(ceilLog2(params->PHTCtrBits)),  //initialize the size of the global history register to be log2(localPredictorSize)
+      localPredictorSize(params->PHTCtrBits),
+      localCtrBits(params->PHTCtrBits)
+{
+	if (!isPowerOf2(localPredictorSize))
+		fatal("Invalid local predictor size.\n");
+
+	//set the mask of the global history register, to ensure the bits above globalHistoryBits are 0s.
+	this->historyRegisterMask = mask(this->globalHistoryBits);
+	//initilize the so-called localCtrs
+	this->localCtrs.resize(this->localPredictorSize);
+
+	for(uint32_t count_ctr = 0;count_ctr < this->localPredictorSize;count_ctr++)
+	{
+		this->localCtrs[count_ctr].setBits(this->localCtrBits);
+	}
+
+	//setting the threshold for the value in local counter to indicates a taken branch
+	// This is equivalent to (2^(Ctr))/2 - 1
+    localThreshold  = (unsigned) (ULL(1) << (this->localCtrBits  - 1)) - 1;
+
+    //this->localThreshold  = (ULL(1) << (this->localCtrBits  - 2)) - 1;
+    //printf("localCtrBits is %u\n",this->localCtrBits);
+    //printf("localThreshold is %08x\n",this->localThreshold);
+
+}
+
+/*
+ * Reset Data Structures
+ */
+void
+GshareBP::reset()
+{
+	//reset the global history register
+	this->globalPredictorSize = 0;
+
+	//reset the localCtrs
+	for(uint32_t count_ctr = 0;count_ctr < this->localPredictorSize;count_ctr++)
+	{
+		this->localCtrs[count_ctr].setBits(localCtrBits);
+	}
+
+}
+
+/*
+ * Global History Registor Update 
+ */
+void
+GshareBP::updateGlobalHistReg(bool taken)
+{
+	//shift the register and insert the new value.
+	this->globalPredictorSize = taken ? (globalPredictorSize << 1) | 1 :
+								(globalPredictorSize << 1);
+	this->globalPredictorSize &= this->historyRegisterMask;
+}
+
+/*
+ * Actions for an unconditional branch
+ 	1. create new record of bpHistory, and return it via bpHistory
+ 	2. update the record of global history register.
+ */
+void
+GshareBP::uncondBranch(ThreadID tid, Addr pc, void * &bpHistory)
+{
+	BPHistory *history = new BPHistory;
+	//store the current global history register to the returning history
+	history->globalPredictorSize = this->globalPredictorSize;
+	//treat unconditional branch as a predict-to-take branch
+	history->finalPred = true;
+	//return the content in history to bpHistory
+	bpHistory = static_cast<void*>(history);
+	updateGlobalHistReg(true);
+	return ;
+}
+
+/*
+ * Lookup the actual branch prediction.
+ */
+bool
+GshareBP::lookup(ThreadID tid, Addr branch_addr, void * &bpHistory)
+{
+	//hash the branch_addr with the global history register to get the index into the table of counter.
+	unsigned localCtrsIdx = ((branch_addr >> this->instShiftAmt) ^ this->globalPredictorSize) & this->historyRegisterMask;
+    assert(localCtrsIdx < this->localPredictorSize);
+    
+    //read the value from the local counters, and assign the judgement into the final_prediction
+    bool final_prediction = (this->localCtrs[localCtrsIdx].read() > this->localThreshold);
+
+    //update the bpHistory
+    BPHistory *history = new BPHistory;
+    history->finalPred = final_prediction;
+    history->globalPredictorSize = this->globalPredictorSize;
+    bpHistory = static_cast<void*>(history);
+
+    //speculatively update the global history register.
+    updateGlobalHistReg(final_prediction);
+
+    return final_prediction;
+}
+
+/*
+ * BTB Update actions, called when a BTB miss happen
+ */
+void
+GshareBP::btbUpdate(ThreadID tid, Addr branch_addr, void * &bpHistory)
+{
+	//force set the last prediction made to be 0
+	this->globalPredictorSize &= (this->historyRegisterMask & ~ULL(1));
+}
+
+/*
+ * Update data structures after getting actual decision 
+ */
+void
+GshareBP::update(ThreadID tid, Addr branch_addr, bool taken, void *bpHistory, bool squashed)
+{
+	assert(bpHistory);
+
+	//case that the branch history is not null
+	BPHistory *history = static_cast<BPHistory *>(bpHistory);
+	//1. get the index to the local counter for that branch address at that bpHistory time
+	unsigned localCtrsIdx = ((branch_addr >> this->instShiftAmt) ^ history->globalPredictorSize) & this->historyRegisterMask;
+
+	assert(localCtrsIdx < localPredictorSize);
+
+	//if the branch is mis-predicted
+	if(squashed)
+	{
+		if(taken)
+			this->globalPredictorSize = (history->globalPredictorSize << 1) | 1;
+		else
+			this->globalPredictorSize = (history->globalPredictorSize << 1);
+		this->globalPredictorSize &= this->historyRegisterMask;
+		
+		return;
+	}
+	
+	//2. update the local counter by the actual judgment of the conditional branch
+	if(taken)
+	{
+		this->localCtrs[localCtrsIdx].increment();
+	}
+	else
+	{
+		this->localCtrs[localCtrsIdx].decrement();
+	}
+	
+	delete history;
+	
+}
+
+/*
+ * Actions for squash
+ */
+void
+GshareBP::squash(ThreadID tid, void *bpHistory) {
+	//retrieve the data from the bpHistory
+	BPHistory *history = static_cast<BPHistory*>(bpHistory);
+	this->globalPredictorSize = history->globalPredictorSize;
+	//release the memory
+	delete history;
+}
+
+GshareBP*
+GshareBPParams::create()
+{
+    return new GshareBP(this);
+}
+
+unsigned
+GshareBP::getGHR(ThreadID tid, void *bp_history) const
+{
+    return static_cast<BPHistory*>(bp_history)->globalHistoryR;
+}
\ No newline at end of file
diff -ruN gem5/src/cpu/pred/gshare.hh /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/gshare.hh
--- gem5/src/cpu/pred/gshare.hh	1969-12-31 17:00:00.000000000 -0700
+++ /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/gshare.hh	2019-06-10 10:29:51.285004000 -0700
@@ -0,0 +1,217 @@
+/*
+ * Copyright (c) 2019 Michael Sneberger
+ * All rights reserved.
+ *
+ * Authors: Michael Sneberger
+ */
+
+#ifndef __CPU_PRED_GSHARE_PRED_HH__
+#define __CPU_PRED_GSHARE_PRED_HH__
+
+#include <vector>
+
+#include "base/types.hh"
+#include "cpu/pred/bpred_unit.hh"
+#include "cpu/pred/sat_counter.hh"
+#include "params/GshareBP.hh"
+
+/**
+ * Implements a gshare branch predictor.
+ */
+class GshareBP : public BPredUnit
+{
+  public:
+    /**
+     * Default branch predictor constructor.
+     */
+    GshareBP(const GshareBPParams *params);
+
+    /**
+     * Resets the global history register
+     */
+     void reset();
+
+    /**
+     * Looks up the given address in the branch predictor and returns
+     * a true/false value as to whether it is taken.  Also creates a
+     * BPHistory object to store any state it will need on squash/update.
+     * @param branch_addr The address of the branch to look up.
+     * @param bp_history Pointer that will be set to the BPHistory object.
+     * @return Whether or not the branch is taken.
+     */
+    bool lookup(ThreadID tid, Addr branch_addr, void * &bp_history);
+
+    /**
+     * Records that there was an unconditional branch, and modifies
+     * the bp history to point to an object that has the previous
+     * global history stored in it.
+     * @param bp_history Pointer that will be set to the BPHistory object.
+     */
+    void uncondBranch(ThreadID tid, Addr pc, void * &bp_history);
+
+    /**
+     * Updates the branch predictor to Not Taken if a BTB entry is
+     * invalid or not found.
+     * @param branch_addr The address of the branch to look up.
+     * @param bp_history Pointer to any bp history state.
+     * @return Whether or not the branch is taken.
+     */
+    void btbUpdate(ThreadID tid, Addr branch_addr, void * &bp_history);
+
+    /**
+     * Updates the branch predictor with the actual result of a branch.
+     * @param branch_addr The address of the branch to update.
+     * @param taken Whether or not the branch was taken.
+     * @param bp_history Pointer to the BPHistory object that was created
+     * when the branch was predicted.
+     * @param squashed is set when this function is called during a squash
+     * operation.
+     */
+    void update(ThreadID tid, Addr branch_addr, bool taken, void *bp_history,
+                bool squashed);
+	
+    /**
+     * Global History Register Update
+     */
+    void updateGlobalHistReg(bool taken);
+
+    /**
+     * Restores the global branch history on a squash.
+     * @param bp_history Pointer to the BPHistory object that has the
+     * previous global branch history in it.
+     */
+    void squash(ThreadID tid, void *bp_history);
+
+    unsigned getGHR(ThreadID tid, void *bp_history) const;
+
+  private:
+    /**
+     * Returns if the branch should be taken or not, given a counter
+     * value.
+     * @param count The counter value.
+     */
+    inline bool getPrediction(uint8_t &count);
+
+    /**
+     * Returns the local history index, given a branch address.
+     * @param branch_addr The branch's PC address.
+     */
+    inline unsigned calcLocHistIdx(Addr &branch_addr);
+
+    /** Updates global history as taken. */
+    inline void updateGlobalHistTaken(ThreadID tid);
+
+    /** Updates global history as not taken. */
+    inline void updateGlobalHistNotTaken(ThreadID tid);
+
+    /**
+     * Updates local histories as taken.
+     * @param local_history_idx The local history table entry that
+     * will be updated.
+     */
+    inline void updateLocalHistTaken(unsigned local_history_idx);
+
+    /**
+     * Updates local histories as not taken.
+     * @param local_history_idx The local history table entry that
+     * will be updated.
+     */
+    inline void updateLocalHistNotTaken(unsigned local_history_idx);
+
+    /**
+     * The branch history information that is created upon predicting
+     * a branch.  It will be passed back upon updating and squashing,
+     * when the BP can use this information to update/restore its
+     * state properly.
+     */
+    struct BPHistory {
+#ifdef DEBUG
+        BPHistory()
+        { newCount++; }
+        ~BPHistory()
+        { newCount--; }
+
+        static int newCount;
+#endif
+        unsigned globalHistoryR;
+        unsigned globalHistory;
+        unsigned localHistoryIdx;
+        unsigned localHistory;
+        unsigned globalPredictorSize;
+        unsigned finalPred;
+        bool localPredTaken;
+        bool globalPredTaken;
+        bool globalUsed;
+    };
+
+    /** Flag for invalid predictor index */
+    static const int invalidPredictorIndex = -1;
+    /** Local counters. */
+    std::vector<SatCounter> localCtrs;
+	
+	/** Global history register. Contains as much history as specified by
+     *  globalHistoryBits. Actual number of bits used is determined by
+     *  globalHistoryMask and choiceHistoryMask. */
+    std::vector<unsigned> globalHistoryReg;
+
+    /** Number of entries in the global predictor. */
+    unsigned globalPredictorSize;
+
+    /** Number of bits for the global history. Determines maximum number of
+        entries in global and choice predictor tables. */
+    unsigned globalHistoryBits;
+
+    /** Number of counters in the local predictor. */
+    unsigned localPredictorSize;
+
+    /** Mask to truncate values stored in the local history table. */
+    unsigned localPredictorMask;
+
+    /** Number of bits of the local predictor's counters. */
+    unsigned localCtrBits;
+
+    /** Array of local history table entries. */
+    std::vector<unsigned> localHistoryTable;
+
+    /** Number of entries in the local history table. */
+    unsigned localHistoryTableSize;
+
+    /** Number of bits for each entry of the local history table. */
+    unsigned localHistoryBits;
+
+    /** Array of counters that make up the global predictor. */
+    std::vector<SatCounter> globalCtrs;
+
+    /** Number of bits of the global predictor's counters. */
+    unsigned globalCtrBits;
+
+    /** Mask to apply to globalHistory to access global history table.
+     *  Based on globalPredictorSize.*/
+    unsigned globalHistoryMask;
+
+    /** Mask to apply to globalHistory to access choice history table.
+     *  Based on choicePredictorSize.*/
+    unsigned choiceHistoryMask;
+
+    /** Mask to control how much history is stored. All of it might not be
+     *  used. */
+    unsigned historyRegisterMask;
+
+    /** Array of counters that make up the choice predictor. */
+    std::vector<SatCounter> choiceCtrs;
+
+    /** Number of entries in the choice predictor. */
+    unsigned choicePredictorSize;
+
+    /** Number of bits in the choice predictor's counters. */
+    unsigned choiceCtrBits;
+
+    /** Thresholds for the counter value; above the threshold is taken,
+     *  equal to or below the threshold is not taken.
+     */
+    unsigned localThreshold;
+    unsigned globalThreshold;
+    unsigned choiceThreshold;
+};
+
+#endif // __CPU_PRED_TOURNAMENT_PRED_HH__
diff -ruN gem5/src/cpu/pred/gshareSAFE.cc /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/gshareSAFE.cc
--- gem5/src/cpu/pred/gshareSAFE.cc	1969-12-31 17:00:00.000000000 -0700
+++ /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/gshareSAFE.cc	2019-06-11 10:37:50.913770000 -0700
@@ -0,0 +1,190 @@
+/*
+ * Copyright (c) 2019 Michael Sneberger
+ * All rights reserved
+ *
+ * Authors: Michael Sneberger
+ */
+
+#include "cpu/pred/gshare.hh"
+#include "base/bitfield.hh"
+#include "base/intmath.hh"
+
+GshareBP::GshareBP(const GshareBPParams *params)
+    : BPredUnit(params),
+	  globalHistoryReg(params->numThreads, 0),
+      globalPredictorSize(0), //initilize the global History registor to 0
+      globalHistoryBits(ceilLog2(params->PHTCtrBits)),  //initialize the size of the global history register to be log2(localPredictorSize)
+      localPredictorSize(params->PHTCtrBits),
+      localCtrBits(params->PHTCtrBits)
+{
+	if (!isPowerOf2(localPredictorSize))
+		fatal("Invalid local predictor size.\n");
+
+	//set the mask of the global history register, to ensure the bits above globalHistoryBits are 0s.
+	this->historyRegisterMask = mask(this->globalHistoryBits);
+	//initilize the so-called localCtrs
+	this->localCtrs.resize(this->localPredictorSize);
+
+	for(uint32_t count_ctr = 0;count_ctr < this->localPredictorSize;count_ctr++)
+	{
+		this->localCtrs[count_ctr].setBits(this->localCtrBits);
+	}
+
+	//setting the threshold for the value in local counter to indicates a taken branch
+	// This is equivalent to (2^(Ctr))/2 - 1
+    localThreshold  = (unsigned) (ULL(1) << (this->localCtrBits  - 1)) - 1;
+
+    //this->localThreshold  = (ULL(1) << (this->localCtrBits  - 2)) - 1;
+    //printf("localCtrBits is %u\n",this->localCtrBits);
+    //printf("localThreshold is %08x\n",this->localThreshold);
+
+}
+
+/*
+ * Reset Data Structures
+ */
+void
+GshareBP::reset()
+{
+	//reset the global history register
+	this->globalPredictorSize = 0;
+
+	//reset the localCtrs
+	for(uint32_t count_ctr = 0;count_ctr < this->localPredictorSize;count_ctr++)
+	{
+		this->localCtrs[count_ctr].setBits(localCtrBits);
+	}
+
+}
+
+/*
+ * Global History Registor Update 
+ */
+void
+GshareBP::updateGlobalHistReg(bool taken)
+{
+	//shift the register and insert the new value.
+	this->globalPredictorSize = taken ? (globalPredictorSize << 1) | 1 :
+								(globalPredictorSize << 1);
+	this->globalPredictorSize &= this->historyRegisterMask;
+}
+
+/*
+ * Actions for an unconditional branch
+ 	1. create new record of bpHistory, and return it via bpHistory
+ 	2. update the record of global history register.
+ */
+void
+GshareBP::uncondBranch(ThreadID tid, Addr pc, void * &bpHistory)
+{
+	BPHistory *history = new BPHistory;
+	//store the current global history register to the returning history
+	history->globalPredictorSize = this->globalPredictorSize;
+	//treat unconditional branch as a predict-to-take branch
+	history->finalPred = true;
+	//return the content in history to bpHistory
+	bpHistory = static_cast<void*>(history);
+	updateGlobalHistReg(true);
+	return ;
+}
+
+/*
+ * Lookup the actual branch prediction.
+ */
+bool
+GshareBP::lookup(ThreadID tid, Addr branch_addr, void * &bpHistory)
+{
+	//hash the branch_addr with the global history register to get the index into the table of counter.
+	unsigned localCtrsIdx = ((branch_addr >> this->instShiftAmt) ^ this->globalPredictorSize) & this->historyRegisterMask;
+    assert(localCtrsIdx < this->localPredictorSize);
+    
+    //read the value from the local counters, and assign the judgement into the final_prediction
+    bool final_prediction = (this->localCtrs[localCtrsIdx].read() > this->localThreshold);
+
+    //update the bpHistory
+    BPHistory *history = new BPHistory;
+    history->finalPred = final_prediction;
+    history->globalPredictorSize = this->globalPredictorSize;
+    bpHistory = static_cast<void*>(history);
+
+    //speculatively update the global history register.
+    updateGlobalHistReg(final_prediction);
+
+    return final_prediction;
+}
+
+/*
+ * BTB Update actions, called when a BTB miss happen
+ */
+void
+GshareBP::btbUpdate(ThreadID tid, Addr branch_addr, void * &bpHistory)
+{
+	//force set the last prediction made to be 0
+	this->globalPredictorSize &= (this->historyRegisterMask & ~ULL(1));
+}
+
+/*
+ * Update data structures after getting actual decision 
+ */
+void
+GshareBP::update(ThreadID tid, Addr branch_addr, bool taken, void *bpHistory, bool squashed)
+{
+	if(bpHistory)
+	{
+		//case that the branch history is not null
+		BPHistory *history = static_cast<BPHistory *>(bpHistory);
+		//1. get the index to the local counter for that branch address at that bpHistory time
+		unsigned localCtrsIdx = ((branch_addr >> this->instShiftAmt) ^ history->globalPredictorSize) & this->historyRegisterMask;
+		assert(localCtrsIdx < localPredictorSize);
+
+		//2. update the local counter by the acutal judgement of the conditional branch
+		if(taken)
+		{
+			this->localCtrs[localCtrsIdx].increment();
+		}
+		else
+		{
+			this->localCtrs[localCtrsIdx].decrement();
+		}
+
+		//if the branch is mis-predicted
+		if(squashed)
+		{
+			if(taken)
+				this->globalPredictorSize = (history->globalPredictorSize << 1) | 1;
+			else
+				this->globalPredictorSize = (history->globalPredictorSize << 1);
+			this->globalPredictorSize &= this->historyRegisterMask;
+		}
+		else
+		{
+			//the globalPredictorSize is already updated when lookup() is called.
+			delete history;
+		}
+	}
+	//otherwise do nothing
+}
+
+/*
+ * Actions for squash
+ */
+void
+GshareBP::squash(ThreadID tid, void *bpHistory) {
+	//retrieve the data from the bpHistory
+	BPHistory *history = static_cast<BPHistory*>(bpHistory);
+	this->globalPredictorSize = history->globalPredictorSize;
+	//release the memory
+	delete history;
+}
+
+GshareBP*
+GshareBPParams::create()
+{
+    return new GshareBP(this);
+}
+
+unsigned
+GshareBP::getGHR(ThreadID tid, void *bp_history) const
+{
+    return static_cast<BPHistory*>(bp_history)->globalHistoryR;
+}
\ No newline at end of file
diff -ruN gem5/src/cpu/pred/SConscript /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/SConscript
--- gem5/src/cpu/pred/SConscript	2019-05-20 10:44:44.000000000 -0700
+++ /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/SConscript	2019-06-04 14:03:30.736999999 -0700
@@ -50,3 +50,4 @@
 DebugFlag('Tage')
 DebugFlag('LTage')
 DebugFlag('LOCALDEBUG')
+Source('gshare.cc')
diff -ruN gem5/src/cpu/pred/tournament.hh /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/tournament.hh
--- gem5/src/cpu/pred/tournament.hh	2019-01-09 13:14:49.000000000 -0700
+++ /home/msneberger/projects/gem5-cse-ca/src/cpu/pred/tournament.hh	2019-06-09 14:27:43.704676232 -0700
@@ -69,6 +69,11 @@
     TournamentBP(const TournamentBPParams *params);
 
     /**
+     * Resets the global history register
+     */
+     void reset();
+
+    /**
      * Looks up the given address in the branch predictor and returns
      * a true/false value as to whether it is taken.  Also creates a
      * BPHistory object to store any state it will need on squash/update.
@@ -106,6 +111,11 @@
                 bool squashed);
 
     /**
+     * Global History Register Update
+     */
+     void updateGlobalHistReg(bool taken);
+
+    /**
      * Restores the global branch history on a squash.
      * @param bp_history Pointer to the BPHistory object that has the
      * previous global branch history in it.
