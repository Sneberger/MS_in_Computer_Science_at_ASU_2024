diff -ruN gem5/src/mem/cache/replacement_policies/lru_ipv.cc gem5-cse-ca/src/mem/cache/replacement_policies/lru_ipv.cc
--- gem5/src/mem/cache/replacement_policies/lru_ipv.cc	1969-12-31 17:00:00.000000000 -0700
+++ gem5-cse-ca/src/mem/cache/replacement_policies/lru_ipv.cc	2019-06-28 22:02:40.367894412 -0700
@@ -0,0 +1,140 @@
+/**
+ * Copyright (c) 2019
+ * All rights reserved.
+ *
+ * Author: Michael Snebergerls
+ */
+
+/**
+ * @file
+ * Definitions of a pseudo-LRU replacement policy with Insertion and Promotion Tree,
+ */
+
+#include "mem/cache/replacement_policies/lru_ipv.hh"
+
+#include <cassert>
+#include <memory>
+#include <vector>
+
+#include "params/LRUIPVRP.hh"
+#include "debug/LRUIPVRPDEBUG.hh"
+
+/**
+ * Based on the Daniel Jimenez paper, a insertion/promotion vector (IPV)
+ * can be used to create a counterintuitive but effective replacement
+ * policy. Jimenez suggested IPV = [ 0 0 1 0 3 0 1 2 1 0 5 1 0 0 1 11 13]
+ * The IPV represents that an incoming block is inserted into position 13.
+ * A block reference in the least recently used (LRU) position is moved
+ * to position 11. A block referenced in position 2 is moved to position
+ * 1 etc.
+ */
+std::vector<int> IPVector {0, 0, 1, 0, 3, 0, 1, 2, 1, 0, 5, 1, 0, 0, 1, 11, 13};
+
+LRUIPVRP::LRUIPVRP(const Params *p)
+    : BaseReplacementPolicy(p)
+{
+}
+
+void // done
+LRUIPVRP::invalidate(const std::shared_ptr<ReplacementData>& replacement_data)
+const
+{
+    // Reset last touch timestamp
+	auto data = std::static_pointer_cast<LRUIPVRPReplData>(replacement_data);
+	DPRINTF(LRUIPVRPDEBUG, "Inside Invalidate %d %d\n", data->index, priority.size());
+	//priority.erase(priority.begin() + data->index);
+	//priority.pop_back();
+	data->index = -1;
+    DPRINTF(LRUIPVRPDEBUG, "Exiting Invalidate\n");
+}
+
+void // done
+LRUIPVRP::touch(const std::shared_ptr<ReplacementData>& replacement_data) const
+{
+	DPRINTF(LRUIPVRPDEBUG, "Inside touch\n");
+	// create local variable to shorten 
+	// std::static_pointer_cast<LRUIPVRPReplData>(replacement_data)
+	auto data = std::static_pointer_cast<LRUIPVRPReplData>(replacement_data);
+	priority.erase(priority.begin() + data->index);
+    data->index = IPVector[data->index];
+	priority.insert(priority.begin() + data->index, data.get());
+	for(int i = data->index; i < priority.size(); i++){
+		if(priority[i] != NULL){
+		priority[i]->index = i;
+		}
+	}
+    DPRINTF(LRUIPVRPDEBUG, "Exiting touch\n");
+}
+
+void // done this is const reference to a shared pointer to struct ReplData struct
+LRUIPVRP::reset(const std::shared_ptr<ReplacementData>& replacement_data) const
+{
+	DPRINTF(LRUIPVRPDEBUG, "Inside beginning of reset\n");
+    // create local variable to shorten caste of pointer to different type of pointer
+	// std::static_pointer_cast<LRUIPVRPReplData>(replacement_data)
+	DPRINTF(LRUIPVRPDEBUG, "Before auto command in reset\n");
+	auto data = std::static_pointer_cast<LRUIPVRPReplData>(replacement_data);
+	// set index to value in last position of IPVector
+	DPRINTF(LRUIPVRPDEBUG, "Before IPVector.back in reset\n");
+    data->index = IPVector.back();
+	// insert value of raw pointer data at index in priority vector
+	DPRINTF(LRUIPVRPDEBUG, "Before priority.insert in reset\n");
+	priority.insert(priority.begin() + data->index, data.get());
+	DPRINTF(LRUIPVRPDEBUG, "Before for loop in reset\n");
+	for(int i = data->index; i < priority.size(); i++){
+		DPRINTF(LRUIPVRPDEBUG, "Inside for loop in reset\n");
+		if(priority[i] != NULL){
+		priority[i]->index = i;
+		}
+	}
+	// Trim vector to keep from overruning memory
+	while (priority.size() > 16)
+    {
+	if(priority.back() != NULL){
+		priority.back()->index = -1;
+	}
+    priority.pop_back();
+    }
+    DPRINTF(LRUIPVRPDEBUG, "Exiting reset\n");
+}
+
+ReplaceableEntry*
+LRUIPVRP::getVictim(const ReplacementCandidates& candidates) const
+{
+    DPRINTF(LRUIPVRPDEBUG, "Inside getVictim\n"); 
+    // There must be at least one replacement candidate
+    assert(candidates.size() > 0);
+
+    // Check for invalid members like other RPs do
+    ReplaceableEntry* victim = candidates[0];
+    for (const auto& candidate : candidates) {
+        // Update victim entry if necessary
+		if (std::static_pointer_cast<LRUIPVRPReplData>(candidate->replacementData)->index == -1) {
+			return candidate;
+		}
+        if (std::static_pointer_cast<LRUIPVRPReplData>(candidate->replacementData)->index >
+                std::static_pointer_cast<LRUIPVRPReplData>(victim->replacementData)->index) {
+            victim = candidate;
+        }
+    }
+
+    DPRINTF(LRUIPVRPDEBUG, "Exiting getVictim\n");
+    return victim;
+}
+
+std::shared_ptr<ReplacementData> // this is the return type = shared pointer
+LRUIPVRP::instantiateEntry()
+{
+	DPRINTF(LRUIPVRPDEBUG, "Inside instantiateEntry\n");
+	// Address segmentation fault by filling the priority array with NULL pointers as
+	// Project is poorly defined as to what is to happen when vector is not full
+	priority.push_back (nullptr);
+    return std::shared_ptr<ReplacementData>(new LRUIPVRPReplData());
+	DPRINTF(LRUIPVRPDEBUG, "Exiting instantiateEntry\n");
+}
+
+LRUIPVRP*
+LRUIPVRPParams::create()
+{
+    return new LRUIPVRP(this);
+}
diff -ruN gem5/src/mem/cache/replacement_policies/lru_ipv.hh gem5-cse-ca/src/mem/cache/replacement_policies/lru_ipv.hh
--- gem5/src/mem/cache/replacement_policies/lru_ipv.hh	1969-12-31 17:00:00.000000000 -0700
+++ gem5-cse-ca/src/mem/cache/replacement_policies/lru_ipv.hh	2019-06-28 16:48:51.984566143 -0700
@@ -0,0 +1,98 @@
+/**
+ * Copyright (c) 2019
+ * All rights reserved.
+ *
+ * Author: Michael Sneberger
+ */
+
+/**
+ * @file
+ * Declaration of a Least Recently Used replacement policy.
+ * The victim is chosen using the last touch timestamp.
+ */
+
+#ifndef __MEM_CACHE_REPLACEMENT_POLICIES_LRU_IPV_RP_HH__
+#define __MEM_CACHE_REPLACEMENT_POLICIES_LRU_IPV_RP_HH__
+
+#include <vector>
+
+#include "mem/cache/replacement_policies/base.hh"
+
+struct LRUIPVRPParams;
+
+class LRUIPVRP : public BaseReplacementPolicy
+{
+  protected:
+    /** LRU-specific implementation of replacement data. */
+    struct LRUIPVRPReplData : ReplacementData
+    {
+        /** index of ReplData. */
+        int index;
+
+        /**
+         * Default constructor. Invalidate data.
+         */
+        LRUIPVRPReplData(){}
+    };
+	
+	/** shared array for all blocks to hold which position each block takes */
+	mutable std::vector<LRUIPVRPReplData*> priority;
+
+  public:
+    /** Convenience typedef. */
+    typedef LRUIPVRPParams Params;
+
+    /**
+     * Construct and initiliaze this replacement policy.
+     */
+    LRUIPVRP(const Params *p);
+
+    /**
+     * Destructor.
+     */
+    ~LRUIPVRP() {}
+
+    /**
+     * Invalidate replacement data to set it as the next probable victim.
+     * Sets its index to -1.
+     *
+     * @param replacement_data Replacement data to be invalidated.
+     */
+    void invalidate(const std::shared_ptr<ReplacementData>& replacement_data)
+                                                              const override;
+
+    /**
+     * Touch an entry to update its replacement data.
+     * Sets its last touch value as the current value.
+     *
+     * @param replacement_data Replacement data to be touched.
+     */
+    void touch(const std::shared_ptr<ReplacementData>& replacement_data) const
+                                                                     override;
+
+    /**
+     * Reset replacement data. Used when an entry is inserted. 
+     *
+     * @param replacement_data Replacement data to be reset.
+     */
+    void reset(const std::shared_ptr<ReplacementData>& replacement_data) const
+                                                                     override;
+
+    /**
+     * Find replacement victim using LRU timestamps.
+     *
+     * @param candidates Replacement candidates, selected by indexing policy.
+     * @return Replacement entry to be replaced.
+     */
+    ReplaceableEntry* getVictim(const ReplacementCandidates& candidates) const
+                                                                     override;
+
+    /**
+     * Instantiate a replacement data entry. 
+     *
+     * @return A shared pointer to the new replacement data.
+     */
+    std::shared_ptr<ReplacementData> instantiateEntry() override;
+};
+
+#endif // __MEM_CACHE_REPLACEMENT_POLICIES_LRU_IPV_RP_HH__
diff -ruN gem5/src/mem/cache/replacement_policies/ReplacementPolicies.py gem5-cse-ca/src/mem/cache/replacement_policies/ReplacementPolicies.py
--- gem5/src/mem/cache/replacement_policies/ReplacementPolicies.py	2019-01-09 13:14:49.000000000 -0700
+++ gem5-cse-ca/src/mem/cache/replacement_policies/ReplacementPolicies.py	2019-06-21 15:14:21.826527570 -0700
@@ -96,3 +96,10 @@
     cxx_class = 'TreePLRURP'
     cxx_header = "mem/cache/replacement_policies/tree_plru_rp.hh"
     num_leaves = Param.Int(Parent.assoc, "Number of leaves in each tree")
+
+class LRUIPVRP(BaseReplacementPolicy):
+    type = 'LRUIPVRP'
+    cxx_class = 'LRUIPVRP'
+    cxx_header = "mem/cache/replacement_policies/lru_ipv.hh"
+# added below to get base cloned code to compile
+    num_leaves = Param.Int(Parent.assoc, "Number of leaves in each tree")
diff -ruN gem5/src/mem/cache/replacement_policies/SConscript gem5-cse-ca/src/mem/cache/replacement_policies/SConscript
--- gem5/src/mem/cache/replacement_policies/SConscript	2019-03-27 10:29:05.000000000 -0700
+++ gem5-cse-ca/src/mem/cache/replacement_policies/SConscript	2019-06-28 10:26:11.340281144 -0700
@@ -42,3 +42,6 @@
 Source('second_chance_rp.cc')
 Source('tree_plru_rp.cc')
 DebugFlag('LRUDEBUG')
+DebugFlag('LRUIPVRPDEBUG')
+# below added per Project 3 Assignment Document
+Source('lru_ipv.cc')
